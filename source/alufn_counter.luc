module alufn_counter (
    input count[4],  // 4-bit input from slowCount value
    output alufn[6]  // 6-bit ALUFN output
  ) {

  always {
  
    // USING BITS OF THE COUNTER WITH THE VARIOUS FUNCTIONS OF THE ALUFN
    // ALLOWS ALUFN CODE TO BE ITERATED FOR THE AUTO TESTING
    
    case(count) {
    
      //ADDER UNIT
      
      b0000: alufn = 6b000000; //ADDITION ALUFN
      
      b0001: alufn = 6b000001; //SUBTRACTION ALUFN
      
      b0010: alufn = 6b000010; //MULTIPLICATION ALUFN
      
      b0100: alufn = 6b000100; // DIVISION ALUFN
      
      b1000: alufn = 6b001000; // NEGATE ALUFN
      
      //COMPARE UNIT
      
      b0011: alufn = 6b011000; //AND ALUFN
      
      b0100: alufn = 6b010111; //NAND ALUFN
      
      b0101: alufn = 6b011110; //OR ALUFN
      
      b0110: alufn = 6b010110; //XOR ALUFN
      
      b0111: alufn = 6b011010; // A ALUFN
      
      //SHIFTER UNIT
      
      b1000: alufn = 6b011100; // INVALID ALUFN
      b1001: alufn = 6b100000; // SHL ALUFN
      b1010: alufn = 6b100001; // SHR ALUFN
      b1011: alufn = 6b100011; // SRA ALUFN
      
      // BOOLEAN UNIT
      
      b1100: alufn = 6b110101; // A = B ALUFN
      b1101: alufn = 6b111001;    // A < B ALUFN
      b1111: alufn = 6b111101;    // A <= B ALUFN
      
      default: alufn = 6b0;       
    }
  }
}
